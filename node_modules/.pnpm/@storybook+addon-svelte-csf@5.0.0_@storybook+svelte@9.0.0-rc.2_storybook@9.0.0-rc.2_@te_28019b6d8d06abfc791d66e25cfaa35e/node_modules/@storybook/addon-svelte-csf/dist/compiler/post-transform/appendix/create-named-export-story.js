import { SVELTE_CSF_TAG_PREFIX, SVELTE_CSF_V5_TAG } from '../../../constants.js';
export function createNamedExportStory(params) {
    const exported = {
        type: 'Identifier',
        name: params.exportName,
    };
    const tags = {
        type: 'ArrayExpression',
        elements: params.nodes.tags?.elements ?? [],
    };
    // In legacy stories, the pre-transform will add a SVELTE_CSF_V4_TAG tag.
    // if it is not present, we add the SVELTE_CSF_V5_TAG tag.
    const hasSvelteCsfTag = tags.elements.some((element) => element.value?.toString().startsWith(SVELTE_CSF_TAG_PREFIX));
    if (!hasSvelteCsfTag) {
        tags.elements.push({
            type: 'Literal',
            value: SVELTE_CSF_V5_TAG,
        });
    }
    const declarations = [
        {
            type: 'VariableDeclarator',
            id: exported,
            init: {
                type: 'ObjectExpression',
                properties: [
                    {
                        type: 'SpreadElement',
                        argument: {
                            type: 'MemberExpression',
                            computed: true,
                            optional: false,
                            object: {
                                type: 'Identifier',
                                name: getNameFromVariable(params.nodes),
                            },
                            property: { type: 'Literal', value: params.exportName },
                        },
                    },
                    {
                        type: 'Property',
                        kind: 'init',
                        computed: false,
                        method: false,
                        shorthand: false,
                        key: {
                            type: 'Identifier',
                            name: 'tags',
                        },
                        value: tags,
                    },
                ],
            },
        },
    ];
    return {
        type: 'ExportNamedDeclaration',
        specifiers: [
            {
                type: 'ExportSpecifier',
                local: exported,
                exported,
            },
        ],
        declaration: {
            type: 'VariableDeclaration',
            kind: 'const',
            declarations,
        },
    };
}
function getNameFromVariable(nodes) {
    return nodes.variable.declarations[0].id.name;
}
