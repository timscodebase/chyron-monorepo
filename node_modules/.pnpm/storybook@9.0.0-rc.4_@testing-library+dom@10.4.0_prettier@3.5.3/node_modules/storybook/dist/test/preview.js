var f = Object.defineProperty;
var e = (t, r) => f(t, "name", { value: r, configurable: !0 });

// src/test/preview.ts
import { instrument as m } from "storybook/internal/instrumenter";
import { definePreview as p } from "storybook/preview-api";
import {
  clearAllMocks as l,
  fn as u,
  isMockFunction as a,
  resetAllMocks as k,
  restoreAllMocks as b,
  uninstrumentedUserEvent as d,
  within as g
} from "storybook/test";
var A = /* @__PURE__ */ e(({ parameters: t }) => {
  t?.test?.mockReset === !0 ? k() : t?.test?.clearMocks === !0 ? l() : t?.test?.restoreMocks !== !1 && b();
}, "resetAllMocksLoader"), i = /* @__PURE__ */ e((t, r = 0, o) => {
  if (r > 5 || t == null)
    return t;
  if (a(t))
    return o && t.mockName(o), t;
  if (typeof t == "function" && "isAction" in t && t.isAction && !("implicit" in t && t.implicit)) {
    let n = u(t);
    return o && n.mockName(o), n;
  }
  if (Array.isArray(t)) {
    r++;
    for (let n = 0; n < t.length; n++)
      t[n] = i(t[n], r);
    return t;
  }
  if (typeof t == "object" && t.constructor === Object) {
    r++;
    for (let [n, c] of Object.entries(t))
      Object.getOwnPropertyDescriptor(t, n)?.writable && (t[n] = i(c, r, n));
    return t;
  }
  return t;
}, "traverseArgs"), M = /* @__PURE__ */ e(({ initialArgs: t }) => {
  i(t);
}, "nameSpiesAndWrapActionsInSpies"), s = !1, E = /* @__PURE__ */ e(async (t) => {
  if (globalThis.HTMLElement && t.canvasElement instanceof globalThis.HTMLElement && (t.canvas = g(t.canvasElement)), globalThis.window?.navigator?.
  clipboard) {
    t.userEvent = m(
      { userEvent: d.setup() },
      { intercept: !0 }
    ).userEvent;
    let r = HTMLElement.prototype.focus;
    s || Object.defineProperties(HTMLElement.prototype, {
      focus: {
        configurable: !0,
        set: /* @__PURE__ */ e((o) => {
          r = o, s = !0;
        }, "set"),
        get: /* @__PURE__ */ e(() => r, "get")
      }
    });
  }
}, "enhanceContext"), T = /* @__PURE__ */ e(() => p({
  loaders: [A, M, E]
}), "default");
export {
  T as default,
  i as traverseArgs
};
