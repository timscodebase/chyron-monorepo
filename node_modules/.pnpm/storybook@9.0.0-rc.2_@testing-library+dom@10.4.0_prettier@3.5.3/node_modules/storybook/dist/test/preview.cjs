"use strict";
var c = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var a = Object.getOwnPropertyNames;
var k = Object.prototype.hasOwnProperty;
var i = (t, n) => c(t, "name", { value: n, configurable: !0 });
var b = (t, n) => {
  for (var o in n)
    c(t, o, { get: n[o], enumerable: !0 });
}, d = (t, n, o, r) => {
  if (n && typeof n == "object" || typeof n == "function")
    for (let s of a(n))
      !k.call(t, s) && s !== o && c(t, s, { get: () => n[s], enumerable: !(r = u(n, s)) || r.enumerable });
  return t;
};
var g = (t) => d(c({}, "__esModule", { value: !0 }), t);

// src/test/preview.ts
var L = {};
b(L, {
  default: () => w,
  traverseArgs: () => f
});
module.exports = g(L);
var p = require("storybook/internal/instrumenter"), l = require("storybook/preview-api"), e = require("storybook/test");
var A = /* @__PURE__ */ i(({ parameters: t }) => {
  t?.test?.mockReset === !0 ? (0, e.resetAllMocks)() : t?.test?.clearMocks === !0 ? (0, e.clearAllMocks)() : t?.test?.restoreMocks !== !1 &&
  (0, e.restoreAllMocks)();
}, "resetAllMocksLoader"), f = /* @__PURE__ */ i((t, n = 0, o) => {
  if (n > 5 || t == null)
    return t;
  if ((0, e.isMockFunction)(t))
    return o && t.mockName(o), t;
  if (typeof t == "function" && "isAction" in t && t.isAction && !("implicit" in t && t.implicit)) {
    let r = (0, e.fn)(t);
    return o && r.mockName(o), r;
  }
  if (Array.isArray(t)) {
    n++;
    for (let r = 0; r < t.length; r++)
      t[r] = f(t[r], n);
    return t;
  }
  if (typeof t == "object" && t.constructor === Object) {
    n++;
    for (let [r, s] of Object.entries(t))
      Object.getOwnPropertyDescriptor(t, r)?.writable && (t[r] = f(s, n, r));
    return t;
  }
  return t;
}, "traverseArgs"), M = /* @__PURE__ */ i(({ initialArgs: t }) => {
  f(t);
}, "nameSpiesAndWrapActionsInSpies"), m = !1, E = /* @__PURE__ */ i(async (t) => {
  if (globalThis.HTMLElement && t.canvasElement instanceof globalThis.HTMLElement && (t.canvas = (0, e.within)(t.canvasElement)), globalThis.
  window?.navigator?.clipboard) {
    t.userEvent = (0, p.instrument)(
      { userEvent: e.uninstrumentedUserEvent.setup() },
      { intercept: !0 }
    ).userEvent;
    let n = HTMLElement.prototype.focus;
    m || Object.defineProperties(HTMLElement.prototype, {
      focus: {
        configurable: !0,
        set: /* @__PURE__ */ i((o) => {
          n = o, m = !0;
        }, "set"),
        get: /* @__PURE__ */ i(() => n, "get")
      }
    });
  }
}, "enhanceContext"), w = /* @__PURE__ */ i(() => (0, l.definePreview)({
  loaders: [A, M, E]
}), "default");
